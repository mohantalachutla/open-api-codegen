openapi: 3.0.3
info:
  title: A2Z - Retail Application
  description: |-
    This is a retail Server based on the OpenAPI 3.0 specification.
  termsOfService: http://swagger.io/terms/
  contact:
    email: mtalchutla@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Api
  url: http://swagger.io
servers:
  - url: http://localhost:3001/api
tags:
  - name: product
    description: Product apis
  - name: order
    description: Oder apis
  - name: auth
    description: User Details, Authentication and Authorization
paths:
  /product:
    post:
      tags:
        - product
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: addProduct
      requestBody:
        $ref: "#/components/requestBodies/ProductRequest"
      responses:
        default:
          $ref: "#/components/responses/ProductResponse"
      security:
        - api_key: []
    get:
      tags:
        - product
      summary: Find products by name, type, subtype, status
      description: Multiple status values can be provided with comma separated strings
      operationId: findProducts
      parameters:
        - name: status
          in: query
          description: product status
          required: false
          explode: true
          schema:
            type: string
            default: instock
            enum:
              - instock
              - outofstock
              - comingsoon
              - fewleft
              - newarrival
        - name: type
          in: query
          description: product type
          required: false
          explode: true
          schema:
            type: string
            enum:
              - book
              - electronic
              - footwear
              - clothing
              - appliance
              - furniture
              - grocery
              - other
        - name: subtype
          in: query
          description: product subtype
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: product name
          required: false
          schema:
            type: string
      responses:
        default:
          $ref: "#/components/responses/ProductListResponse"
  /product/{productId}:
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be fetched
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ProductRequest"
      responses:
        default:
          $ref: "#/components/responses/ProductResponse"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        default:
          $ref: "#/components/responses/ProductResponse"
        "400":
          description: Product not found
  /product/changeStatus/{productId}:
    put:
      tags:
        - product
      summary: Change product status
      description: Changes product status by id
      operationId: changeProductStatusById
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be fetched
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ChangeProductStatusRequest"
      responses:
        default:
          $ref: "#/components/responses/ProductResponse"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
  /auth/register:
    post:
      tags:
        - auth
      summary: Register user
      description: Register a new user and get auth token
      operationId: registerUser
      requestBody:
        $ref: "#/components/requestBodies/RegisterRequest"
      responses:
        default:
          $ref: "#/components/responses/RegisterResponse"
  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      description: Logs user into the system
      operationId: loginUser
      requestBody:
        $ref: "#/components/requestBodies/LoginRequest"
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /auth/account:
    get:
      tags:
        - auth
      summary: Get user account
      description: This can only be done by the logged in user.
      operationId: getUser
      responses:
        default:
          $ref: "#/components/responses/UserResponse"
    put:
      tags:
        - auth
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: _id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          $ref: "#/components/schemas/ApiResponse"
    delete:
      tags:
        - auth
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: _id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        _id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: john@email.com
        username:
          type: string
          example: theUser
        status:
          type: string
          example: active
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        displayName:
          type: string
        displayPicture:
          type: string
        ssn:
          type: string
        phone:
          type: string
          example: "12345"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        payload:
          type: object
        responseCode:
          type: integer
        responseMessage:
          type: string
        responseCreatedAt:
          type: string
          format: date-time
      xml:
        name: "##default"
    Register:
      type: object
      properties:
        email:
          type: string
          example: jack@gmail.com
        username:
          type: string
          example: jack
        password:
          type: string
          example: "1234"
    Login:
      type: object
      properties:
        email:
          type: string
          example: jack@gmail.com
        password:
          type: string
          example: "1234"
    ProductWithoutId:
      type: object
      required:
        - name
        - type
        - price
      properties:
        name:
          type: string
          example: "A2Z"
        description:
          type: string
        type:
          type: string
          example: "book"
        subtype:
          type: string
          example: "novel"
        status:
          type: string
          example: "instock"
        totalItems:
          type: integer
          example: 10
        availableItems:
          type: integer
          example: 5
        rating:
          type: number
          example: 4
          minimum: 0
          maximum: 5
        image:
          type: string
        price:
          type: number
          example: 1000
    Product:
      allOf:
        - $ref: "#/components/schemas/ProductWithoutId"
        - type: object
          properties:
            _id:
              type: integer
              format: int64
    ProductList:
      type: array
      items:
        $ref: "#/components/schemas/Product"
  requestBodies:
    ProductRequest:
      description: Register object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductWithoutId"
        application/xml:
          schema:
            $ref: "#/components/schemas/ProductWithoutId"
    ChangeProductStatusRequest:
      description: Register object
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "instock"
        application/xml:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "instock"
    RegisterRequest:
      description: Register object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Register"
        application/xml:
          schema:
            $ref: "#/components/schemas/Register"
    LoginRequest:
      description: Login object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Login"
        application/xml:
          schema:
            $ref: "#/components/schemas/Login"
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  responses:
    ProductResponse:
      description: Product detail
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
              - type: object
                properties:
                  payload:
                    $ref: "#/components/schemas/Product"
    ProductListResponse:
      description: List of products
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
              - type: object
                properties:
                  payload:
                    $ref: "#/components/schemas/ProductList"
    RegisterResponse:
      description: Registration successful
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
              - type: object
                properties:
                  payload:
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - type: object
                        properties:
                          token:
                            type: string
        application/xml:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
              - type: object
                properties:
                  payload:
                    $ref: "#/components/schemas/Register"
    UserResponse:
      description: User response
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
              - type: object
                properties:
                  payload:
                    $ref: "#/components/schemas/User"
        application/xml:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
              - type: object
                properties:
                  payload:
                    $ref: "#/components/schemas/User"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
